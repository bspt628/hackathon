// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBlockStmt, err = db.PrepareContext(ctx, createBlock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlock: %w", err)
	}
	if q.createDMStmt, err = db.PrepareContext(ctx, createDM); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDM: %w", err)
	}
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.createLikeStmt, err = db.PrepareContext(ctx, createLike); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLike: %w", err)
	}
	if q.createReplyStmt, err = db.PrepareContext(ctx, createReply); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReply: %w", err)
	}
	if q.createRetweetStmt, err = db.PrepareContext(ctx, createRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRetweet: %w", err)
	}
	if q.createTweetStmt, err = db.PrepareContext(ctx, createTweet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTweet: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteBlockStmt, err = db.PrepareContext(ctx, deleteBlock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBlock: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.deleteLikeStmt, err = db.PrepareContext(ctx, deleteLike); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLike: %w", err)
	}
	if q.deleteRetweetStmt, err = db.PrepareContext(ctx, deleteRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRetweet: %w", err)
	}
	if q.deleteTweetStmt, err = db.PrepareContext(ctx, deleteTweet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTweet: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getProfileStmt, err = db.PrepareContext(ctx, getProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfile: %w", err)
	}
	if q.getTweetStmt, err = db.PrepareContext(ctx, getTweet); err != nil {
		return nil, fmt.Errorf("error preparing query GetTweet: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listDMsStmt, err = db.PrepareContext(ctx, listDMs); err != nil {
		return nil, fmt.Errorf("error preparing query ListDMs: %w", err)
	}
	if q.listNotificationsStmt, err = db.PrepareContext(ctx, listNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query ListNotifications: %w", err)
	}
	if q.listRepliesStmt, err = db.PrepareContext(ctx, listReplies); err != nil {
		return nil, fmt.Errorf("error preparing query ListReplies: %w", err)
	}
	if q.listTweetsStmt, err = db.PrepareContext(ctx, listTweets); err != nil {
		return nil, fmt.Errorf("error preparing query ListTweets: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.markNotificationAsReadStmt, err = db.PrepareContext(ctx, markNotificationAsRead); err != nil {
		return nil, fmt.Errorf("error preparing query MarkNotificationAsRead: %w", err)
	}
	if q.updateProfileStmt, err = db.PrepareContext(ctx, updateProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProfile: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBlockStmt != nil {
		if cerr := q.createBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlockStmt: %w", cerr)
		}
	}
	if q.createDMStmt != nil {
		if cerr := q.createDMStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDMStmt: %w", cerr)
		}
	}
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.createLikeStmt != nil {
		if cerr := q.createLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeStmt: %w", cerr)
		}
	}
	if q.createReplyStmt != nil {
		if cerr := q.createReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReplyStmt: %w", cerr)
		}
	}
	if q.createRetweetStmt != nil {
		if cerr := q.createRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRetweetStmt: %w", cerr)
		}
	}
	if q.createTweetStmt != nil {
		if cerr := q.createTweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTweetStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteBlockStmt != nil {
		if cerr := q.deleteBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBlockStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.deleteLikeStmt != nil {
		if cerr := q.deleteLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeStmt: %w", cerr)
		}
	}
	if q.deleteRetweetStmt != nil {
		if cerr := q.deleteRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRetweetStmt: %w", cerr)
		}
	}
	if q.deleteTweetStmt != nil {
		if cerr := q.deleteTweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTweetStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getProfileStmt != nil {
		if cerr := q.getProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileStmt: %w", cerr)
		}
	}
	if q.getTweetStmt != nil {
		if cerr := q.getTweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTweetStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listDMsStmt != nil {
		if cerr := q.listDMsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDMsStmt: %w", cerr)
		}
	}
	if q.listNotificationsStmt != nil {
		if cerr := q.listNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNotificationsStmt: %w", cerr)
		}
	}
	if q.listRepliesStmt != nil {
		if cerr := q.listRepliesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRepliesStmt: %w", cerr)
		}
	}
	if q.listTweetsStmt != nil {
		if cerr := q.listTweetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTweetsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.markNotificationAsReadStmt != nil {
		if cerr := q.markNotificationAsReadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markNotificationAsReadStmt: %w", cerr)
		}
	}
	if q.updateProfileStmt != nil {
		if cerr := q.updateProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProfileStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createBlockStmt            *sql.Stmt
	createDMStmt               *sql.Stmt
	createFollowStmt           *sql.Stmt
	createLikeStmt             *sql.Stmt
	createReplyStmt            *sql.Stmt
	createRetweetStmt          *sql.Stmt
	createTweetStmt            *sql.Stmt
	createUserStmt             *sql.Stmt
	deleteBlockStmt            *sql.Stmt
	deleteFollowStmt           *sql.Stmt
	deleteLikeStmt             *sql.Stmt
	deleteRetweetStmt          *sql.Stmt
	deleteTweetStmt            *sql.Stmt
	deleteUserStmt             *sql.Stmt
	getProfileStmt             *sql.Stmt
	getTweetStmt               *sql.Stmt
	getUserStmt                *sql.Stmt
	listDMsStmt                *sql.Stmt
	listNotificationsStmt      *sql.Stmt
	listRepliesStmt            *sql.Stmt
	listTweetsStmt             *sql.Stmt
	listUsersStmt              *sql.Stmt
	markNotificationAsReadStmt *sql.Stmt
	updateProfileStmt          *sql.Stmt
	updateUserStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createBlockStmt:            q.createBlockStmt,
		createDMStmt:               q.createDMStmt,
		createFollowStmt:           q.createFollowStmt,
		createLikeStmt:             q.createLikeStmt,
		createReplyStmt:            q.createReplyStmt,
		createRetweetStmt:          q.createRetweetStmt,
		createTweetStmt:            q.createTweetStmt,
		createUserStmt:             q.createUserStmt,
		deleteBlockStmt:            q.deleteBlockStmt,
		deleteFollowStmt:           q.deleteFollowStmt,
		deleteLikeStmt:             q.deleteLikeStmt,
		deleteRetweetStmt:          q.deleteRetweetStmt,
		deleteTweetStmt:            q.deleteTweetStmt,
		deleteUserStmt:             q.deleteUserStmt,
		getProfileStmt:             q.getProfileStmt,
		getTweetStmt:               q.getTweetStmt,
		getUserStmt:                q.getUserStmt,
		listDMsStmt:                q.listDMsStmt,
		listNotificationsStmt:      q.listNotificationsStmt,
		listRepliesStmt:            q.listRepliesStmt,
		listTweetsStmt:             q.listTweetsStmt,
		listUsersStmt:              q.listUsersStmt,
		markNotificationAsReadStmt: q.markNotificationAsReadStmt,
		updateProfileStmt:          q.updateProfileStmt,
		updateUserStmt:             q.updateUserStmt,
	}
}
