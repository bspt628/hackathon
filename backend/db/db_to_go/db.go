// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addBlockStmt, err = db.PrepareContext(ctx, addBlock); err != nil {
		return nil, fmt.Errorf("error preparing query AddBlock: %w", err)
	}
	if q.addFollowStmt, err = db.PrepareContext(ctx, addFollow); err != nil {
		return nil, fmt.Errorf("error preparing query AddFollow: %w", err)
	}
	if q.addLikeStmt, err = db.PrepareContext(ctx, addLike); err != nil {
		return nil, fmt.Errorf("error preparing query AddLike: %w", err)
	}
	if q.createNotificationStmt, err = db.PrepareContext(ctx, createNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotification: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createRepostStmt, err = db.PrepareContext(ctx, createRepost); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepost: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getDMConversationStmt, err = db.PrepareContext(ctx, getDMConversation); err != nil {
		return nil, fmt.Errorf("error preparing query GetDMConversation: %w", err)
	}
	if q.getRecentPostsStmt, err = db.PrepareContext(ctx, getRecentPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentPosts: %w", err)
	}
	if q.getUnreadNotificationsStmt, err = db.PrepareContext(ctx, getUnreadNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnreadNotifications: %w", err)
	}
	if q.getUserStatsStmt, err = db.PrepareContext(ctx, getUserStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserStats: %w", err)
	}
	if q.getUserTimelineStmt, err = db.PrepareContext(ctx, getUserTimeline); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserTimeline: %w", err)
	}
	if q.searchPostsByHashtagStmt, err = db.PrepareContext(ctx, searchPostsByHashtag); err != nil {
		return nil, fmt.Errorf("error preparing query SearchPostsByHashtag: %w", err)
	}
	if q.sendDMStmt, err = db.PrepareContext(ctx, sendDM); err != nil {
		return nil, fmt.Errorf("error preparing query SendDM: %w", err)
	}
	if q.updateFollowersCountStmt, err = db.PrepareContext(ctx, updateFollowersCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFollowersCount: %w", err)
	}
	if q.updatePostLikesCountStmt, err = db.PrepareContext(ctx, updatePostLikesCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostLikesCount: %w", err)
	}
	if q.updateUserInfoStmt, err = db.PrepareContext(ctx, updateUserInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserInfo: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addBlockStmt != nil {
		if cerr := q.addBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addBlockStmt: %w", cerr)
		}
	}
	if q.addFollowStmt != nil {
		if cerr := q.addFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFollowStmt: %w", cerr)
		}
	}
	if q.addLikeStmt != nil {
		if cerr := q.addLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addLikeStmt: %w", cerr)
		}
	}
	if q.createNotificationStmt != nil {
		if cerr := q.createNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNotificationStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createRepostStmt != nil {
		if cerr := q.createRepostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepostStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getDMConversationStmt != nil {
		if cerr := q.getDMConversationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDMConversationStmt: %w", cerr)
		}
	}
	if q.getRecentPostsStmt != nil {
		if cerr := q.getRecentPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentPostsStmt: %w", cerr)
		}
	}
	if q.getUnreadNotificationsStmt != nil {
		if cerr := q.getUnreadNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnreadNotificationsStmt: %w", cerr)
		}
	}
	if q.getUserStatsStmt != nil {
		if cerr := q.getUserStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStatsStmt: %w", cerr)
		}
	}
	if q.getUserTimelineStmt != nil {
		if cerr := q.getUserTimelineStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserTimelineStmt: %w", cerr)
		}
	}
	if q.searchPostsByHashtagStmt != nil {
		if cerr := q.searchPostsByHashtagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchPostsByHashtagStmt: %w", cerr)
		}
	}
	if q.sendDMStmt != nil {
		if cerr := q.sendDMStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing sendDMStmt: %w", cerr)
		}
	}
	if q.updateFollowersCountStmt != nil {
		if cerr := q.updateFollowersCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFollowersCountStmt: %w", cerr)
		}
	}
	if q.updatePostLikesCountStmt != nil {
		if cerr := q.updatePostLikesCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostLikesCountStmt: %w", cerr)
		}
	}
	if q.updateUserInfoStmt != nil {
		if cerr := q.updateUserInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserInfoStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addBlockStmt               *sql.Stmt
	addFollowStmt              *sql.Stmt
	addLikeStmt                *sql.Stmt
	createNotificationStmt     *sql.Stmt
	createPostStmt             *sql.Stmt
	createRepostStmt           *sql.Stmt
	createUserStmt             *sql.Stmt
	getDMConversationStmt      *sql.Stmt
	getRecentPostsStmt         *sql.Stmt
	getUnreadNotificationsStmt *sql.Stmt
	getUserStatsStmt           *sql.Stmt
	getUserTimelineStmt        *sql.Stmt
	searchPostsByHashtagStmt   *sql.Stmt
	sendDMStmt                 *sql.Stmt
	updateFollowersCountStmt   *sql.Stmt
	updatePostLikesCountStmt   *sql.Stmt
	updateUserInfoStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addBlockStmt:               q.addBlockStmt,
		addFollowStmt:              q.addFollowStmt,
		addLikeStmt:                q.addLikeStmt,
		createNotificationStmt:     q.createNotificationStmt,
		createPostStmt:             q.createPostStmt,
		createRepostStmt:           q.createRepostStmt,
		createUserStmt:             q.createUserStmt,
		getDMConversationStmt:      q.getDMConversationStmt,
		getRecentPostsStmt:         q.getRecentPostsStmt,
		getUnreadNotificationsStmt: q.getUnreadNotificationsStmt,
		getUserStatsStmt:           q.getUserStatsStmt,
		getUserTimelineStmt:        q.getUserTimelineStmt,
		searchPostsByHashtagStmt:   q.searchPostsByHashtagStmt,
		sendDMStmt:                 q.sendDMStmt,
		updateFollowersCountStmt:   q.updateFollowersCountStmt,
		updatePostLikesCountStmt:   q.updatePostLikesCountStmt,
		updateUserInfoStmt:         q.updateUserInfoStmt,
	}
}
