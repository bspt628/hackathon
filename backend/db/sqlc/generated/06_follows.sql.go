// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 06_follows.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addFollow = `-- name: AddFollow :exec
INSERT INTO follows (id, follower_id, following_id)
VALUES (?, ?, ?)
`

type AddFollowParams struct {
	ID          string         `json:"id"`
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

func (q *Queries) AddFollow(ctx context.Context, arg AddFollowParams) error {
	_, err := q.db.ExecContext(ctx, addFollow, arg.ID, arg.FollowerID, arg.FollowingID)
	return err
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT EXISTS(
    SELECT 1
    FROM follows
    WHERE follower_id = ? AND following_id = ?
) AS following
`

type GetFollowStatusParams struct {
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getFollowStatus, arg.FollowerID, arg.FollowingID)
	var following bool
	err := row.Scan(&following)
	return following, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT u.id, u.username, u.display_name
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.following_id = ?
`

type GetFollowersRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
}

func (q *Queries) GetFollowers(ctx context.Context, followingID sql.NullString) ([]GetFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersRow
	for rows.Next() {
		var i GetFollowersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.DisplayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersAndFollowings = `-- name: GetFollowersAndFollowings :many
SELECT u.id, u.username, u.display_name, f.follower_id, f.following_id
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.following_id = ? OR f.follower_id = ?
`

type GetFollowersAndFollowingsParams struct {
	FollowingID sql.NullString `json:"following_id"`
	FollowerID  sql.NullString `json:"follower_id"`
}

type GetFollowersAndFollowingsRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

func (q *Queries) GetFollowersAndFollowings(ctx context.Context, arg GetFollowersAndFollowingsParams) ([]GetFollowersAndFollowingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowersAndFollowings, arg.FollowingID, arg.FollowerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersAndFollowingsRow
	for rows.Next() {
		var i GetFollowersAndFollowingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.FollowerID,
			&i.FollowingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersCount = `-- name: GetFollowersCount :one
SELECT followers_count FROM users WHERE id = ?
`

func (q *Queries) GetFollowersCount(ctx context.Context, id string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getFollowersCount, id)
	var followers_count sql.NullInt32
	err := row.Scan(&followers_count)
	return followers_count, err
}

const getFollowings = `-- name: GetFollowings :many
SELECT u.id, u.username, u.display_name
FROM follows f
JOIN users u ON f.following_id = u.id
WHERE f.follower_id = ?
`

type GetFollowingsRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
}

func (q *Queries) GetFollowings(ctx context.Context, followerID sql.NullString) ([]GetFollowingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowings, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingsRow
	for rows.Next() {
		var i GetFollowingsRow
		if err := rows.Scan(&i.ID, &i.Username, &i.DisplayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingsCount = `-- name: GetFollowingsCount :one
SELECT following_count FROM users WHERE id = ?
`

func (q *Queries) GetFollowingsCount(ctx context.Context, id string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getFollowingsCount, id)
	var following_count sql.NullInt32
	err := row.Scan(&following_count)
	return following_count, err
}

const removeFollow = `-- name: RemoveFollow :execresult
DELETE FROM follows
WHERE follower_id = ? AND following_id = ?
`

type RemoveFollowParams struct {
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

func (q *Queries) RemoveFollow(ctx context.Context, arg RemoveFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeFollow, arg.FollowerID, arg.FollowingID)
}

const updateFollowersCount = `-- name: UpdateFollowersCount :execresult
UPDATE users
SET followers_count = (
    SELECT COUNT(*) FROM follows WHERE following_id = users.id
)
WHERE users.id = ?
`

// いらないかも
func (q *Queries) UpdateFollowersCount(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFollowersCount, id)
}

const updateFollowingsCount = `-- name: UpdateFollowingsCount :execresult
UPDATE users
SET following_count = (
    SELECT COUNT(*) FROM follows WHERE following_id = users.id
)
WHERE users.id = ?
`

func (q *Queries) UpdateFollowingsCount(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFollowingsCount, id)
}
