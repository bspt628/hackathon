// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 01_users.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, firebase_uid, email, password_hash, username, display_name)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID           string         `json:"id"`
	FirebaseUid  string         `json:"firebase_uid"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Username     string         `json:"username"`
	DisplayName  sql.NullString `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FirebaseUid,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.DisplayName,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getEmailFromUsername = `-- name: GetEmailFromUsername :one
SELECT email
FROM users
WHERE username = ?
`

func (q *Queries) GetEmailFromUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmailFromUsername, username)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getIDfromFirebaseUID = `-- name: GetIDfromFirebaseUID :one
SELECT id FROM users WHERE firebase_uid = ?
`

func (q *Queries) GetIDfromFirebaseUID(ctx context.Context, firebaseUid string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIDfromFirebaseUID, firebaseUid)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, firebase_uid, email, username, display_name, bio, location, followers_count, following_count, posts_count
FROM users
WHERE id = ?
`

type GetUserRow struct {
	ID             string         `json:"id"`
	FirebaseUid    string         `json:"firebase_uid"`
	Email          string         `json:"email"`
	Username       string         `json:"username"`
	DisplayName    sql.NullString `json:"display_name"`
	Bio            sql.NullString `json:"bio"`
	Location       sql.NullString `json:"location"`
	FollowersCount sql.NullInt32  `json:"followers_count"`
	FollowingCount sql.NullInt32  `json:"following_count"`
	PostsCount     sql.NullInt32  `json:"posts_count"`
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Email,
		&i.Username,
		&i.DisplayName,
		&i.Bio,
		&i.Location,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.PostsCount,
	)
	return i, err
}

const getUserPasswordFromUsername = `-- name: GetUserPasswordFromUsername :one
SELECT id, password_hash 
FROM users
WHERE username = ?
`

type GetUserPasswordFromUsernameRow struct {
	ID           string `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) GetUserPasswordFromUsername(ctx context.Context, username string) (GetUserPasswordFromUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordFromUsername, username)
	var i GetUserPasswordFromUsernameRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT
    u.id,
    u.username,
    u.followers_count,
    u.following_count,
    u.posts_count,
    COUNT(DISTINCT l.id) AS total_likes_received
FROM users u
LEFT JOIN posts p ON u.id = p.user_id
LEFT JOIN likes l ON p.id = l.postId
WHERE u.id = ?
GROUP BY u.id
`

type GetUserStatsRow struct {
	ID                 string        `json:"id"`
	Username           string        `json:"username"`
	FollowersCount     sql.NullInt32 `json:"followers_count"`
	FollowingCount     sql.NullInt32 `json:"following_count"`
	PostsCount         sql.NullInt32 `json:"posts_count"`
	TotalLikesReceived int64         `json:"total_likes_received"`
}

func (q *Queries) GetUserStats(ctx context.Context, id string) (GetUserStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserStats, id)
	var i GetUserStatsRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.PostsCount,
		&i.TotalLikesReceived,
	)
	return i, err
}

const updateUserBanStatus = `-- name: UpdateUserBanStatus :exec
UPDATE users
SET
    is_banned = ?
WHERE id = ?
`

type UpdateUserBanStatusParams struct {
	IsBanned sql.NullBool `json:"is_banned"`
	ID       string       `json:"id"`
}

func (q *Queries) UpdateUserBanStatus(ctx context.Context, arg UpdateUserBanStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBanStatus, arg.IsBanned, arg.ID)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET
    email = ?
WHERE id = ?
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    string `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
SET
    username = ?
WHERE id = ?
`

type UpdateUserNameParams struct {
	Username string `json:"username"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.Username, arg.ID)
	return err
}

const updateUserNotifications = `-- name: UpdateUserNotifications :exec
UPDATE users
SET
    notification_settings = ?
WHERE id = ?
`

type UpdateUserNotificationsParams struct {
	NotificationSettings json.RawMessage `json:"notification_settings"`
	ID                   string          `json:"id"`
}

func (q *Queries) UpdateUserNotifications(ctx context.Context, arg UpdateUserNotificationsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNotifications, arg.NotificationSettings, arg.ID)
	return err
}

const updateUserPrivacy = `-- name: UpdateUserPrivacy :exec
UPDATE users
SET
    is_private = ?
WHERE id = ?
`

type UpdateUserPrivacyParams struct {
	IsPrivate sql.NullBool `json:"is_private"`
	ID        string       `json:"id"`
}

func (q *Queries) UpdateUserPrivacy(ctx context.Context, arg UpdateUserPrivacyParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPrivacy, arg.IsPrivate, arg.ID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users
SET 
    profile_image_url = COALESCE(?, profile_image_url),
    bio = COALESCE(?, bio),
    location = COALESCE(?, location),
    website = COALESCE(?, website)
WHERE id = ?
`

type UpdateUserProfileParams struct {
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	Location        sql.NullString `json:"location"`
	Website         sql.NullString `json:"website"`
	ID              string         `json:"id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.ProfileImageUrl,
		arg.Bio,
		arg.Location,
		arg.Website,
		arg.ID,
	)
	return err
}

const updateUserSettings = `-- name: UpdateUserSettings :exec
UPDATE users
SET 
    display_name = COALESCE(?, display_name),
    birth_date = COALESCE(?, birth_date),
    language = COALESCE(?, language)
WHERE id = ?
`

type UpdateUserSettingsParams struct {
	DisplayName sql.NullString `json:"display_name"`
	BirthDate   sql.NullTime   `json:"birth_date"`
	Language    sql.NullString `json:"language"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSettings,
		arg.DisplayName,
		arg.BirthDate,
		arg.Language,
		arg.ID,
	)
	return err
}
