// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 05_replies.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const decrementReplyCount = `-- name: DecrementReplyCount :exec
UPDATE posts
SET replies_count = replies_count - 1
WHERE (id = ? AND replies_count > 0)
`

func (q *Queries) DecrementReplyCount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, decrementReplyCount, id)
	return err
}

const getPostReplies = `-- name: GetPostReplies :many
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.is_repost, p.original_post_id, p.reply_to_id, p.root_post_id, p.is_reply, p.media_urls, p.likes_count, p.reposts_count, p.replies_count, p.views_count, p.visibility, p.is_pinned, p.is_deleted, u.username, u.display_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.root_post_id = ?
ORDER BY p.created_at ASC
`

type GetPostRepliesRow struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	CreatedAt      sql.NullTime    `json:"created_at"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsReply        sql.NullBool    `json:"is_reply"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	LikesCount     sql.NullInt32   `json:"likes_count"`
	RepostsCount   sql.NullInt32   `json:"reposts_count"`
	RepliesCount   sql.NullInt32   `json:"replies_count"`
	ViewsCount     sql.NullInt32   `json:"views_count"`
	Visibility     sql.NullString  `json:"visibility"`
	IsPinned       sql.NullBool    `json:"is_pinned"`
	IsDeleted      sql.NullBool    `json:"is_deleted"`
	Username       string          `json:"username"`
	DisplayName    sql.NullString  `json:"display_name"`
}

func (q *Queries) GetPostReplies(ctx context.Context, rootPostID sql.NullString) ([]GetPostRepliesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostReplies, rootPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostRepliesRow
	for rows.Next() {
		var i GetPostRepliesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsRepost,
			&i.OriginalPostID,
			&i.ReplyToID,
			&i.RootPostID,
			&i.IsReply,
			&i.MediaUrls,
			&i.LikesCount,
			&i.RepostsCount,
			&i.RepliesCount,
			&i.ViewsCount,
			&i.Visibility,
			&i.IsPinned,
			&i.IsDeleted,
			&i.Username,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementReplyCount = `-- name: IncrementReplyCount :exec
UPDATE posts
SET replies_count = replies_count + 1
WHERE id = ?
`

func (q *Queries) IncrementReplyCount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, incrementReplyCount, id)
	return err
}
