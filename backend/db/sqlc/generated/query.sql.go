// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const addFollow = `-- name: AddFollow :exec
INSERT INTO follows (id, follower_id, following_id, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
`

type AddFollowParams struct {
	ID          string         `json:"id"`
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

// 実装済み
func (q *Queries) AddFollow(ctx context.Context, arg AddFollowParams) error {
	_, err := q.db.ExecContext(ctx, addFollow, arg.ID, arg.FollowerID, arg.FollowingID)
	return err
}

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
    id, user_id, content, media_urls, visibility, 
    original_post_id, reply_to_id, root_post_id, is_repost, is_reply, created_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type CreatePostParams struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	Visibility     sql.NullString  `json:"visibility"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	IsReply        sql.NullBool    `json:"is_reply"`
}

// 実装済み
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.MediaUrls,
		arg.Visibility,
		arg.OriginalPostID,
		arg.ReplyToID,
		arg.RootPostID,
		arg.IsRepost,
		arg.IsReply,
	)
	return err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, firebase_uid, email, password_hash, username, display_name, created_at)
VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateUserParams struct {
	ID           string         `json:"id"`
	FirebaseUid  string         `json:"firebase_uid"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Username     string         `json:"username"`
	DisplayName  sql.NullString `json:"display_name"`
}

// 実装済み
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FirebaseUid,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.DisplayName,
	)
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
SET 
    is_deleted = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

// 実装済み
func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const deleteResetToken = `-- name: DeleteResetToken :exec
DELETE FROM password_reset_tokens
WHERE token = ?
`

// 実装済み
func (q *Queries) DeleteResetToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteResetToken, token)
	return err
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users WHERE id = ?
`

// 実装済み
func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getEmailFromUsername = `-- name: GetEmailFromUsername :one
SELECT email
FROM users
WHERE username = ?
`

// 実装済み
func (q *Queries) GetEmailFromUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmailFromUsername, username)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT EXISTS(
    SELECT 1
    FROM follows
    WHERE follower_id = ? AND following_id = ?
) AS following
`

type GetFollowStatusParams struct {
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

// 実装済み
func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getFollowStatus, arg.FollowerID, arg.FollowingID)
	var following bool
	err := row.Scan(&following)
	return following, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT u.id, u.username, u.display_name
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.following_id = ?
`

type GetFollowersRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
}

// 実装済み
func (q *Queries) GetFollowers(ctx context.Context, followingID sql.NullString) ([]GetFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersRow
	for rows.Next() {
		var i GetFollowersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.DisplayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersAndFollowings = `-- name: GetFollowersAndFollowings :many
SELECT u.id, u.username, u.display_name, f.follower_id, f.following_id
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.following_id = ? OR f.follower_id = ?
`

type GetFollowersAndFollowingsParams struct {
	FollowingID sql.NullString `json:"following_id"`
	FollowerID  sql.NullString `json:"follower_id"`
}

type GetFollowersAndFollowingsRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

// 実装済み
func (q *Queries) GetFollowersAndFollowings(ctx context.Context, arg GetFollowersAndFollowingsParams) ([]GetFollowersAndFollowingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowersAndFollowings, arg.FollowingID, arg.FollowerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersAndFollowingsRow
	for rows.Next() {
		var i GetFollowersAndFollowingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.FollowerID,
			&i.FollowingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersCount = `-- name: GetFollowersCount :one
SELECT followers_count FROM users WHERE id = ?
`

// 実装済み
func (q *Queries) GetFollowersCount(ctx context.Context, id string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getFollowersCount, id)
	var followers_count sql.NullInt32
	err := row.Scan(&followers_count)
	return followers_count, err
}

const getFollowings = `-- name: GetFollowings :many
SELECT u.id, u.username, u.display_name
FROM follows f
JOIN users u ON f.following_id = u.id
WHERE f.follower_id = ?
`

type GetFollowingsRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
}

// 実装済み
func (q *Queries) GetFollowings(ctx context.Context, followerID sql.NullString) ([]GetFollowingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowings, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingsRow
	for rows.Next() {
		var i GetFollowingsRow
		if err := rows.Scan(&i.ID, &i.Username, &i.DisplayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingsCount = `-- name: GetFollowingsCount :one
SELECT following_count FROM users WHERE id = ?
`

// 実装済み
func (q *Queries) GetFollowingsCount(ctx context.Context, id string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getFollowingsCount, id)
	var following_count sql.NullInt32
	err := row.Scan(&following_count)
	return following_count, err
}

const getIDfromFirebaseUID = `-- name: GetIDfromFirebaseUID :one
SELECT id FROM users WHERE firebase_uid = ?
`

// 実装済み
func (q *Queries) GetIDfromFirebaseUID(ctx context.Context, firebaseUid string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIDfromFirebaseUID, firebaseUid)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, firebase_uid, email, username, display_name, bio, location, followers_count, following_count, posts_count
FROM users
WHERE id = ?
`

type GetUserRow struct {
	ID             string         `json:"id"`
	FirebaseUid    string         `json:"firebase_uid"`
	Email          string         `json:"email"`
	Username       string         `json:"username"`
	DisplayName    sql.NullString `json:"display_name"`
	Bio            sql.NullString `json:"bio"`
	Location       sql.NullString `json:"location"`
	FollowersCount sql.NullInt32  `json:"followers_count"`
	FollowingCount sql.NullInt32  `json:"following_count"`
	PostsCount     sql.NullInt32  `json:"posts_count"`
}

// 実装済み
func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Email,
		&i.Username,
		&i.DisplayName,
		&i.Bio,
		&i.Location,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.PostsCount,
	)
	return i, err
}

const removeFollow = `-- name: RemoveFollow :execresult
DELETE FROM follows
WHERE follower_id = ? AND following_id = ?
`

type RemoveFollowParams struct {
	FollowerID  sql.NullString `json:"follower_id"`
	FollowingID sql.NullString `json:"following_id"`
}

// 実装済み
func (q *Queries) RemoveFollow(ctx context.Context, arg RemoveFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeFollow, arg.FollowerID, arg.FollowingID)
}

const saveResetToken = `-- name: SaveResetToken :exec
INSERT INTO password_reset_tokens (email, token, expiry)
VALUES (?, ?, ?)
`

type SaveResetTokenParams struct {
	Email  string    `json:"email"`
	Token  string    `json:"token"`
	Expiry time.Time `json:"expiry"`
}

// 実装済み
func (q *Queries) SaveResetToken(ctx context.Context, arg SaveResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, saveResetToken, arg.Email, arg.Token, arg.Expiry)
	return err
}

const signInCheck = `-- name: SignInCheck :one
SELECT id, password_hash FROM users WHERE username = ?
`

type SignInCheckRow struct {
	ID           string `json:"id"`
	PasswordHash string `json:"password_hash"`
}

// 実装済み
func (q *Queries) SignInCheck(ctx context.Context, username string) (SignInCheckRow, error) {
	row := q.db.QueryRowContext(ctx, signInCheck, username)
	var i SignInCheckRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const updateFollowersCount = `-- name: UpdateFollowersCount :execresult
UPDATE users
SET followers_count = (
    SELECT COUNT(*) FROM follows WHERE following_id = users.id
)
WHERE users.id = ?
`

// 実装済み
func (q *Queries) UpdateFollowersCount(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFollowersCount, id)
}

const updateFollowingsCount = `-- name: UpdateFollowingsCount :execresult
UPDATE users
SET following_count = (
    SELECT COUNT(*) FROM follows WHERE following_id = users.id
)
WHERE users.id = ?
`

// 実装済み
func (q *Queries) UpdateFollowingsCount(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFollowingsCount, id)
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET 
    password_hash = ?,
    last_password_change = NOW(),
    updated_at = CURRENT_TIMESTAMP
WHERE email = ?
`

type UpdatePasswordParams struct {
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

// 実装済み
func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.Email)
	return err
}

const updateUserBanStatus = `-- name: UpdateUserBanStatus :exec
UPDATE users
SET
    is_banned = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserBanStatusParams struct {
	IsBanned sql.NullBool `json:"is_banned"`
	ID       string       `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserBanStatus(ctx context.Context, arg UpdateUserBanStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBanStatus, arg.IsBanned, arg.ID)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET
    email = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    string `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}

const updateUserNotifications = `-- name: UpdateUserNotifications :exec
UPDATE users
SET
    notification_settings = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserNotificationsParams struct {
	NotificationSettings json.RawMessage `json:"notification_settings"`
	ID                   string          `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserNotifications(ctx context.Context, arg UpdateUserNotificationsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNotifications, arg.NotificationSettings, arg.ID)
	return err
}

const updateUserPrivacy = `-- name: UpdateUserPrivacy :exec
UPDATE users
SET
    is_private = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPrivacyParams struct {
	IsPrivate sql.NullBool `json:"is_private"`
	ID        string       `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserPrivacy(ctx context.Context, arg UpdateUserPrivacyParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPrivacy, arg.IsPrivate, arg.ID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users
SET 
    profile_image_url = COALESCE(?, profile_image_url),
    bio = COALESCE(?, bio),
    location = COALESCE(?, location),
    website = COALESCE(?, website),
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserProfileParams struct {
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	Location        sql.NullString `json:"location"`
	Website         sql.NullString `json:"website"`
	ID              string         `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.ProfileImageUrl,
		arg.Bio,
		arg.Location,
		arg.Website,
		arg.ID,
	)
	return err
}

const updateUserSettings = `-- name: UpdateUserSettings :exec
UPDATE users
SET 
    display_name = COALESCE(?, display_name),
    birth_date = COALESCE(?, birth_date),
    language = COALESCE(?, language),
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserSettingsParams struct {
	DisplayName sql.NullString `json:"display_name"`
	BirthDate   sql.NullTime   `json:"birth_date"`
	Language    sql.NullString `json:"language"`
	ID          string         `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSettings,
		arg.DisplayName,
		arg.BirthDate,
		arg.Language,
		arg.ID,
	)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users
SET
    username = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserUsernameParams struct {
	Username string `json:"username"`
	ID       string `json:"id"`
}

// 実装済み
func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserUsername, arg.Username, arg.ID)
	return err
}

const validateResetToken = `-- name: ValidateResetToken :one
SELECT email FROM password_reset_tokens
WHERE token = ? AND expiry > NOW()
`

// 実装済み
func (q *Queries) ValidateResetToken(ctx context.Context, token string) (string, error) {
	row := q.db.QueryRowContext(ctx, validateResetToken, token)
	var email string
	err := row.Scan(&email)
	return email, err
}
