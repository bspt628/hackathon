// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 07_blocks.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addBlock = `-- name: AddBlock :exec
INSERT INTO blocks (id, blocked_by_id, blocked_user_id)
VALUES (?, ?, ?)
`

type AddBlockParams struct {
	ID            string         `json:"id"`
	BlockedByID   sql.NullString `json:"blocked_by_id"`
	BlockedUserID sql.NullString `json:"blocked_user_id"`
}

func (q *Queries) AddBlock(ctx context.Context, arg AddBlockParams) error {
	_, err := q.db.ExecContext(ctx, addBlock, arg.ID, arg.BlockedByID, arg.BlockedUserID)
	return err
}

const getBlockStatus = `-- name: GetBlockStatus :one
SELECT EXISTS(
    SELECT 1
    FROM blocks
    WHERE blocked_by_id = ? AND blocked_user_id = ?
) AS blocked
`

type GetBlockStatusParams struct {
	BlockedByID   sql.NullString `json:"blocked_by_id"`
	BlockedUserID sql.NullString `json:"blocked_user_id"`
}

func (q *Queries) GetBlockStatus(ctx context.Context, arg GetBlockStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getBlockStatus, arg.BlockedByID, arg.BlockedUserID)
	var blocked bool
	err := row.Scan(&blocked)
	return blocked, err
}

const getBlockedUsers = `-- name: GetBlockedUsers :many
SELECT u.id, u.username, u.display_name
FROM blocks b
JOIN users u ON b.blocked_user_id = u.id
WHERE b.blocked_by_id = ?
`

type GetBlockedUsersRow struct {
	ID          string         `json:"id"`
	Username    string         `json:"username"`
	DisplayName sql.NullString `json:"display_name"`
}

func (q *Queries) GetBlockedUsers(ctx context.Context, blockedByID sql.NullString) ([]GetBlockedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockedUsers, blockedByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockedUsersRow
	for rows.Next() {
		var i GetBlockedUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.DisplayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBlock = `-- name: RemoveBlock :exec
DELETE FROM blocks
WHERE blocked_by_id = ? AND blocked_user_id = ?
`

type RemoveBlockParams struct {
	BlockedByID   sql.NullString `json:"blocked_by_id"`
	BlockedUserID sql.NullString `json:"blocked_user_id"`
}

func (q *Queries) RemoveBlock(ctx context.Context, arg RemoveBlockParams) error {
	_, err := q.db.ExecContext(ctx, removeBlock, arg.BlockedByID, arg.BlockedUserID)
	return err
}
