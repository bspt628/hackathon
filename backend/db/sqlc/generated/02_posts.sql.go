// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 02_posts.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const checkPostExists = `-- name: CheckPostExists :one
SELECT EXISTS (
    SELECT 1 
    FROM posts 
    WHERE id = ?
)
`

func (q *Queries) CheckPostExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkPostExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkRootPostValidity = `-- name: CheckRootPostValidity :one
SELECT root_post_id IS NULL AS is_valid
FROM posts
WHERE id = ?
`

func (q *Queries) CheckRootPostValidity(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkRootPostValidity, id)
	var is_valid bool
	err := row.Scan(&is_valid)
	return is_valid, err
}

const clearReplyToID = `-- name: ClearReplyToID :exec
UPDATE posts
SET reply_to_id = NULL
WHERE reply_to_id = ?
`

func (q *Queries) ClearReplyToID(ctx context.Context, replyToID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, clearReplyToID, replyToID)
	return err
}

const countReplyPosts = `-- name: CountReplyPosts :one
SELECT COUNT(*) AS reply_count
FROM posts
WHERE root_post_id = ?
`

func (q *Queries) CountReplyPosts(ctx context.Context, rootPostID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countReplyPosts, rootPostID)
	var reply_count int64
	err := row.Scan(&reply_count)
	return reply_count, err
}

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
    id, user_id, content, media_urls, visibility, 
    original_post_id, reply_to_id, root_post_id, is_repost, is_reply
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	Visibility     sql.NullString  `json:"visibility"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	IsReply        sql.NullBool    `json:"is_reply"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.MediaUrls,
		arg.Visibility,
		arg.OriginalPostID,
		arg.ReplyToID,
		arg.RootPostID,
		arg.IsRepost,
		arg.IsReply,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
SET 
    is_deleted = TRUE
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.is_repost, p.original_post_id, p.reply_to_id, p.root_post_id, p.is_reply, p.media_urls, p.likes_count, p.reposts_count, p.replies_count, p.views_count, p.visibility, p.is_pinned, p.is_deleted, u.username, u.display_name
FROM posts p
JOIN users u ON p.user_id = u.id
ORDER BY p.created_at DESC
LIMIT ?
`

type GetAllPostsRow struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	CreatedAt      sql.NullTime    `json:"created_at"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsReply        sql.NullBool    `json:"is_reply"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	LikesCount     sql.NullInt32   `json:"likes_count"`
	RepostsCount   sql.NullInt32   `json:"reposts_count"`
	RepliesCount   sql.NullInt32   `json:"replies_count"`
	ViewsCount     sql.NullInt32   `json:"views_count"`
	Visibility     sql.NullString  `json:"visibility"`
	IsPinned       sql.NullBool    `json:"is_pinned"`
	IsDeleted      sql.NullBool    `json:"is_deleted"`
	Username       string          `json:"username"`
	DisplayName    sql.NullString  `json:"display_name"`
}

func (q *Queries) GetAllPosts(ctx context.Context, limit int32) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsRepost,
			&i.OriginalPostID,
			&i.ReplyToID,
			&i.RootPostID,
			&i.IsReply,
			&i.MediaUrls,
			&i.LikesCount,
			&i.RepostsCount,
			&i.RepliesCount,
			&i.ViewsCount,
			&i.Visibility,
			&i.IsPinned,
			&i.IsDeleted,
			&i.Username,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingUsersPosts = `-- name: GetFollowingUsersPosts :many
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.is_repost, p.original_post_id, p.reply_to_id, p.root_post_id, p.is_reply, p.media_urls, p.likes_count, p.reposts_count, p.replies_count, p.views_count, p.visibility, p.is_pinned, p.is_deleted, u.username, u.display_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.user_id IN (
    SELECT following_id
    FROM follows
    WHERE follower_id = ?
)
ORDER BY p.created_at DESC
LIMIT ?
`

type GetFollowingUsersPostsParams struct {
	FollowerID sql.NullString `json:"follower_id"`
	Limit      int32          `json:"limit"`
}

type GetFollowingUsersPostsRow struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	CreatedAt      sql.NullTime    `json:"created_at"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsReply        sql.NullBool    `json:"is_reply"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	LikesCount     sql.NullInt32   `json:"likes_count"`
	RepostsCount   sql.NullInt32   `json:"reposts_count"`
	RepliesCount   sql.NullInt32   `json:"replies_count"`
	ViewsCount     sql.NullInt32   `json:"views_count"`
	Visibility     sql.NullString  `json:"visibility"`
	IsPinned       sql.NullBool    `json:"is_pinned"`
	IsDeleted      sql.NullBool    `json:"is_deleted"`
	Username       string          `json:"username"`
	DisplayName    sql.NullString  `json:"display_name"`
}

func (q *Queries) GetFollowingUsersPosts(ctx context.Context, arg GetFollowingUsersPostsParams) ([]GetFollowingUsersPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingUsersPosts, arg.FollowerID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingUsersPostsRow
	for rows.Next() {
		var i GetFollowingUsersPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsRepost,
			&i.OriginalPostID,
			&i.ReplyToID,
			&i.RootPostID,
			&i.IsReply,
			&i.MediaUrls,
			&i.LikesCount,
			&i.RepostsCount,
			&i.RepliesCount,
			&i.ViewsCount,
			&i.Visibility,
			&i.IsPinned,
			&i.IsDeleted,
			&i.Username,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.is_repost, p.original_post_id, p.reply_to_id, p.root_post_id, p.is_reply, p.media_urls, p.likes_count, p.reposts_count, p.replies_count, p.views_count, p.visibility, p.is_pinned, p.is_deleted, u.username, u.display_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.id = ?
`

type GetPostRow struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	CreatedAt      sql.NullTime    `json:"created_at"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsReply        sql.NullBool    `json:"is_reply"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	LikesCount     sql.NullInt32   `json:"likes_count"`
	RepostsCount   sql.NullInt32   `json:"reposts_count"`
	RepliesCount   sql.NullInt32   `json:"replies_count"`
	ViewsCount     sql.NullInt32   `json:"views_count"`
	Visibility     sql.NullString  `json:"visibility"`
	IsPinned       sql.NullBool    `json:"is_pinned"`
	IsDeleted      sql.NullBool    `json:"is_deleted"`
	Username       string          `json:"username"`
	DisplayName    sql.NullString  `json:"display_name"`
}

func (q *Queries) GetPost(ctx context.Context, id string) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRepost,
		&i.OriginalPostID,
		&i.ReplyToID,
		&i.RootPostID,
		&i.IsReply,
		&i.MediaUrls,
		&i.LikesCount,
		&i.RepostsCount,
		&i.RepliesCount,
		&i.ViewsCount,
		&i.Visibility,
		&i.IsPinned,
		&i.IsDeleted,
		&i.Username,
		&i.DisplayName,
	)
	return i, err
}

const getReplyToID = `-- name: GetReplyToID :one
SELECT reply_to_id
FROM posts
WHERE id = ?
`

func (q *Queries) GetReplyToID(ctx context.Context, id string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getReplyToID, id)
	var reply_to_id sql.NullString
	err := row.Scan(&reply_to_id)
	return reply_to_id, err
}

const getUserTimeline = `-- name: GetUserTimeline :many
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.is_repost, p.original_post_id, p.reply_to_id, p.root_post_id, p.is_reply, p.media_urls, p.likes_count, p.reposts_count, p.replies_count, p.views_count, p.visibility, p.is_pinned, p.is_deleted, u.username, u.display_name
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.user_id IN (
    SELECT following_id
    FROM follows
    WHERE follower_id = ?
) OR p.user_id = ?
ORDER BY p.created_at DESC
LIMIT ?
`

type GetUserTimelineParams struct {
	FollowerID sql.NullString `json:"follower_id"`
	UserID     sql.NullString `json:"user_id"`
	Limit      int32          `json:"limit"`
}

type GetUserTimelineRow struct {
	ID             string          `json:"id"`
	UserID         sql.NullString  `json:"user_id"`
	Content        sql.NullString  `json:"content"`
	CreatedAt      sql.NullTime    `json:"created_at"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	IsRepost       sql.NullBool    `json:"is_repost"`
	OriginalPostID sql.NullString  `json:"original_post_id"`
	ReplyToID      sql.NullString  `json:"reply_to_id"`
	RootPostID     sql.NullString  `json:"root_post_id"`
	IsReply        sql.NullBool    `json:"is_reply"`
	MediaUrls      json.RawMessage `json:"media_urls"`
	LikesCount     sql.NullInt32   `json:"likes_count"`
	RepostsCount   sql.NullInt32   `json:"reposts_count"`
	RepliesCount   sql.NullInt32   `json:"replies_count"`
	ViewsCount     sql.NullInt32   `json:"views_count"`
	Visibility     sql.NullString  `json:"visibility"`
	IsPinned       sql.NullBool    `json:"is_pinned"`
	IsDeleted      sql.NullBool    `json:"is_deleted"`
	Username       string          `json:"username"`
	DisplayName    sql.NullString  `json:"display_name"`
}

func (q *Queries) GetUserTimeline(ctx context.Context, arg GetUserTimelineParams) ([]GetUserTimelineRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTimeline, arg.FollowerID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTimelineRow
	for rows.Next() {
		var i GetUserTimelineRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsRepost,
			&i.OriginalPostID,
			&i.ReplyToID,
			&i.RootPostID,
			&i.IsReply,
			&i.MediaUrls,
			&i.LikesCount,
			&i.RepostsCount,
			&i.RepliesCount,
			&i.ViewsCount,
			&i.Visibility,
			&i.IsPinned,
			&i.IsDeleted,
			&i.Username,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePost = `-- name: RestorePost :execresult
UPDATE posts
SET is_deleted = false
WHERE id = ? AND is_deleted = true AND TIMESTAMPDIFF(MINUTE, updated_at, CURRENT_TIMESTAMP) <= 20
`

func (q *Queries) RestorePost(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, restorePost, id)
}
